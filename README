Coding task for Blockhouse
by Toby Brull
----------------------------------------

Compile & run with:
g++ -std=c++17 coding_task_brull.cpp && ./a.out

The file "coding_task_brull.cpp" contains the "main" function and various
test-cases.

The file "lang.hpp" contains the library (in namespace "lang") and is divided
into three parts (the AST, a DSL to construct ASTs, and the visitation).
Although all code is inside this header, in a real code-base some of the code
should go into an implementation file, of course.

The following describes the three parts of "lang.hpp" in more detail:

Part one contains the classes that make up the AST itself. It contains a virtual
base-class, from which every other node in the AST is derived.  There are three
classes that derive from this base-class, representing an integer literal, a
boolean literal, and (either a unary or a binary) operator.

Part two enables a succinct DSL to construct ASTs through C++'s user-defined
literals and operator overloading. This allows to construct ASTs via a syntax
that is very close to what it would look like in a parsed language by
effectively using the parser of the C++ compiler to do the job.

It's a bit unusual to have user-defined literals return move-only types, but it
seems acceptable here for brevity.

In part three the visitation for the type-checking and the evaluation are done
in the recursive function "lang::evaluate()".  If this returns a variant in the
"InvalidExpression" state, this represents a type-error; otherwise, it returns
the result of the evaluation in the corresponding type (int or bool).
